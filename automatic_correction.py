#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 14 14:42:31 2019

@author: m_buss13
"""

#%%
###############################################################################
# Standard parameter
###############################################################################
import os
from subprocess import call
from subprocess import run
import matplotlib.pyplot as plt
import numpy as np
import numpy.polynomial.polynomial as poly
from scipy import interpolate
import PySimpleGUI as sg

# plt.rc('text', usetex=True)
# plt.rcParams['text.latex.preamble'] = [r'\usepackage{amsmath}',
#                                        r'\usepackage{siunitx}',
#                                        r'\sisetup{detect-all}']

# plt.rc('font',**{'family':'serif','serif':['CMR10']})
plt.rc('lines', linewidth=1)
plt.rc('axes', titlesize=18, labelsize=12)
plt.rc('xtick', labelsize=10)
plt.rc('ytick', labelsize=10)

plt.rcParams['figure.dpi'] = 140

###############################################################################
# Set parameters and input variables
###############################################################################
sg.theme('DarkBlue')  # No gray windows please!
# chorus_sequence = b''
chorus_sequence = b''

pulse1 = [[sg.Text('Duration of P1 (us):'), sg.Text(size=(10,1), key='tw1_out')],
          [sg.Input(key='tw1', size=(10,1))],
          [sg.Text('RF-Factor of P1:'), sg.Text(size=(10,1), key='rffactor1_out')],
          [sg.Input(key='rffactor1', size=(10,1))],
          [sg.Text('Shape parameter of P1:'), sg.Text(size=(10,1), key='N1_out')],
          [sg.Input(key='N1', size=(10,1))]]
pulse2 = [[sg.Text('Duration of P2 (us):'), sg.Text(size=(10,1), key='tw2_out')],
          [sg.Input(key='tw2', size=(15,1))],
          [sg.Text('RF-Factor of P2:'), sg.Text(size=(10,1), key='rffactor2_out')],
          [sg.Input(key='rffactor2', size=(15,1))],
          [sg.Text('Shape parameter of P2:'), sg.Text(size=(10,1), key='N2_out')],
          [sg.Input(key='N2', size=(15,1))]]
delay  = [[sg.Text('Duration of D3 (us):'), sg.Text(size=(10,1), key='tau3_out')],
          [sg.Input(key='tau3', size=(15,1))]]
pulse3 = [[sg.Text('Duration of P3 (us):'), sg.Text(size=(10,1), key='tw3_out')],
          [sg.Input(key='tw3', size=(15,1))],
          [sg.Text('RF-Factor of P3:'), sg.Text(size=(10,1), key='rffactor3_out')],
          [sg.Input(key='rffactor3', size=(15,1))],
          [sg.Text('Shape parameter of P3:'), sg.Text(size=(10,1), key='N3_out')],
          [sg.Input(key='N3', size=(15,1))]]

# define the layout
layout = [[sg.Text('Define Pulse Parameter here, then click start Simulation'), sg.Text(size=(15,1), key='text1_out')],
          [sg.Text('Shapes are saved in this folder and can be used by Bruker Spectrometer'), sg.Text(size=(15,1), key='text3_out')],
          [sg.Text('and the SIMPSON package.'), sg.Text(size=(15,1), key='text5_out')],
          [sg.Text('Simulations can also be restarted with changed Parameter from her.'), sg.Text(size=(15,1), key='text6_out')],
          [sg.Button('', image_data=chorus_sequence,
          button_color=(sg.theme_background_color(),sg.theme_background_color()),
          border_width=0, key='sequence')],
          [sg.Column(pulse1), sg.Column(pulse2), sg.Column(delay), sg.Column(pulse3)],
          [sg.Text('Sweepwidth (kHz):'), sg.Text(size=(15,1), key='delta_out')],
          [sg.Input(key='delta')],
          [sg.Text('Offset stepsize (Hz):'), sg.Text(size=(15,1), key='ss_offset_out')],
          [sg.Input(key='ss_offset')],
          [sg.Text('Limit to supress edge variation:'), sg.Text(size=(15,1), key='rms_limit_out')],
          [sg.Input(key='rms_limit')],
          [sg.Button('Start Simulation'), sg.Button('Exit')]
         ]

#STEP 2 - create the window
window = sg.Window('WCHORUS Correction Tool', layout, grab_anywhere=True)

# STEP3 - the event loop
while True:
    event, values = window.read()   # Read the event that happened and the values dictionary
    print(event, values)
    if event == sg.WIN_CLOSED or event == 'Exit':     # If user closed window with X or if user clicked "Exit" button then exit
        break
    if event == 'Start Simulation':
        # Update the "output" text element to be the value of "input" element
        window['delta_out'].update(values['delta'])
        window['tw1_out'].update(values['tw1'])
        window['tw2_out'].update(values['tw2'])
        window['tw3_out'].update(values['tw3'])
        window['rffactor1_out'].update(values['rffactor1'])
        window['rffactor2_out'].update(values['rffactor2'])
        window['rffactor3_out'].update(values['rffactor3'])
        window['tau1_out'].update(values['tau1'])
        window['tau2_out'].update(values['tau2'])
        window['tau3_out'].update(values['tau3'])
        window['N1_out'].update(values['N1'])
        window['N2_out'].update(values['N2'])
        window['N3_out'].update(values['N3'])
        window['ss_offset_out'].update(values['ss_offset'])
        window['rms_limit_out'].update(values['rms_limit'])

        nuclei = '7Li'
        csa = '0'
        eta = '0'

        delta       = values['delta']
        tw1         = values['tw1']
        tw2         = values['tw2']
        tw3         = values['tw3']
        rffactor1   = values['rffactor1']
        rffactor2   = values['rffactor2']
        rffactor3   = values['rffactor3']
        tau1        = values['tau1']
        tau2        = values['tau2']
        tau3        = values['tau3']
        N           = values['N1']
        ss_offset   = values['ss_offset']
        rms_limit   = int(values['rms_limit'])

        poly_order = 42
        start = 0.2
        end = 0.8
        outer_weight = 0.0
        rmssteps = 0.01
        

        ###############################################################################
        # Write spinsys files
        ###############################################################################
        offset_spinsys = open('offset.spinsys', 'w')
        offset_spinsys.write('spinsys {\n')
        offset_spinsys.write('    channels ' + nuclei + '\n')
        offset_spinsys.write('    nuclei ' + nuclei + '\n')
        offset_spinsys.write('    shift 1 0p 0 0.0 0 0 0\n')
        offset_spinsys.write('}')
        offset_spinsys.close()

        phasecorrected_spinsys = open('phasecorrected.spinsys', 'w')
        phasecorrected_spinsys.write('spinsys {\n')
        phasecorrected_spinsys.write('    channels ' + nuclei + '\n')
        phasecorrected_spinsys.write('    nuclei ' + nuclei + '\n')
        phasecorrected_spinsys.write('    shift 1 0 ' + csa + ' ' + eta + ' 0 0 0\n')
        phasecorrected_spinsys.write('}')
        phasecorrected_spinsys.close()

        simpson_inputfile = open('phasecorrection_liquid.tcl', 'w')
        simpson_input = """spinsys {
            channels 1H
            nuclei 1H
            shift 1 0 0 0.0 0 0 0
        }

        par {
            method           direct
            proton_frequency 500e6
            spin_rate        0
            crystal_file     alpha0beta0
            gamma_angles     1
            np               2
            start_operator   Inz
            detect_operator  Inp
            sw               2000e3
            variable tsw     1e6/sw
            verbose          0000
            conjugate_fid    false
        }

        proc pulseq {} {
            global par rfsh1 rfsh2 rfsh3
            reset

            # Experiment selection done by scanning for the type string
            if {[string equal $par(type) "double_echo"]} {
                pulse_shaped $par(tw1) $rfsh1
                delay $par(tau1)
                pulse_shaped $par(tw2) $rfsh2
                delay $par(tau2)
                pulse_shaped $par(tw3) $rfsh3
                delay $par(tau3)
            } elseif {[string equal $par(type) "double_echo_phasecorr"]} {
                pulse_shaped $par(tw1) $rfsh1
                delay $par(tau1)
                pulse_shaped $par(tw2) $rfsh2
                delay $par(tau2)
                pulse_shaped $par(tw3) $rfsh3
                delay $par(tau3)
            } elseif {[string equal $par(type) "create_shapes"]} {
            } else {
                puts "Please select excitation mode in main!"
                exit
            }

            store 1
            acq 2 1 $par(ph31)
        }

        proc main {} {
            global par rfsh1 rfsh2 rfsh3 argc argv

            # Read Arguments from commandline
            if { $argc != 15 } {
                puts "Wrong number of Inputs"
                puts "Please try again."
            } else {
                set par(tw1)                        [lindex $argv 1]
                set par(tw2)                        [lindex $argv 2]
                set par(tw3)                        [lindex $argv 3]
                set par(type)                       [lindex $argv 4]
                set par(Delta)                      [lindex $argv 5]
                set par(N)                          [lindex $argv 6]
                set par(rf_factor1)                 [lindex $argv 7]
                set par(rf_factor2)                 [lindex $argv 8]
                set par(rf_factor3)                 [lindex $argv 9]
                set par(tau1)                       [lindex $argv 10]
                set par(tau2)                       [lindex $argv 11]
                set par(tau3)                       [lindex $argv 12]
                set par(filename_phasecorrect)      [lindex $argv 13]
                set par(ss_offset)                  [lindex $argv 14]
            }

            set par(stepsize)   0.05

            set par(np_tau1)    [expr round($par(tau1)/$par(stepsize))]
            set par(np_tau2)    [expr round($par(tau2)/$par(stepsize))]
            set par(np_tau3)    [expr round($par(tau3)/$par(stepsize))]

            #Define start and end values of constant list in Hz
            set par(start_offset)   [expr -1*($par(Delta)*1000/2.0)]
            set par(end_offset)     [expr    ($par(Delta)*1000/2.0)]
            set offset_value_list   [list_offset]

            set results {}

            set par(phasecycles) 16
            set par(ph1_list)  { 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 }
            set par(ph2_list)  { 0 90 180 270 0 90 180 270 0 90 180 270 0 90 180 270 }
            set par(ph3_list)  { 0 0 0 0 90 90 90 90 180 180 180 180 270 270 270 270 }
            set par(ph31_list) { 0 180 0 180 180 0 180 0 0 180 0 180 180 0 180 0 }

            if {[string equal $par(type) "create_shapes"]} {
                set offset_value_list { 0 }
                set par(phasecycles) 1
            }

        for {set index 0} {$index<$par(phasecycles)} {incr index} {
            set par(ph1) [lindex $par(ph1_list) $index]
            set par(ph2) [lindex $par(ph2_list) $index]
            set par(ph3) [lindex $par(ph3_list) $index]
            set par(ph31) [lindex $par(ph31_list) $index]

            # Set shapes for WURST type experiments
            if {[string equal $par(type) "double_echo"]} {
                # Set first WURST pulse (excitation)
                set par(sweep_rate1) [expr ($par(Delta)*1e3)/($par(tw1)*1e-6)]
                set par(rf1) [format "%.2f" [expr $par(rf_factor1)*sqrt($par(sweep_rate1))]]
                set rfsh1 [list2shape [wurst $par(N) $par(tw1) $par(Delta) $par(rf1) $par(ph1) $par(stepsize)]]

                # Set second WURST pulse (refocussing)
                set par(sweep_rate2) [expr ($par(Delta)*1e3)/($par(tw2)*1e-6)]
                set par(rf2) [format "%.2f" [expr $par(rf_factor2)*sqrt($par(sweep_rate2))]]
                set rfsh2 [list2shape [wurst $par(N) $par(tw2) $par(Delta) $par(rf2) $par(ph2) $par(stepsize)]]

                # Set third WURST pulse (refocussing)
                set par(sweep_rate3) [expr ($par(Delta)*1e3)/($par(tw3)*1e-6)]
                set par(rf3) [format "%.2f" [expr $par(rf_factor3)*sqrt($par(sweep_rate3))]]
                set rfsh3 [list2shape [wurst $par(N) $par(tw3) $par(Delta) $par(rf3) $par(ph3) $par(stepsize)]]

                # Set filenames for WURST type experiments
                set par(filename) $par(name)_rffactor_$par(rf_factor1)_$par(rf_factor2)_$par(rf_factor3)_tw_$par(tw1)_$par(tw2)_$par(tw3)_delays_$par(tau1)_$par(tau2)_$par(tau3)_delta_$par(Delta)_N_$par(N)
            } elseif {[string equal $par(type) "create_shapes"]} {
                # Set first WURST pulse (excitation)
                set par(sweep_rate1) [expr ($par(Delta)*1e3)/($par(tw1)*1e-6)]
                set par(rf1) [format "%.2f" [expr $par(rf_factor1)*sqrt($par(sweep_rate1))]]
                set rfsh1 [list2shape [wurst_phasecorr $par(N) $par(tw1) $par(Delta) $par(rf1) $par(filename_phasecorrect) 0.0]]

                # Set second WURST pulse (refocussing)
                set par(sweep_rate2) [expr ($par(Delta)*1e3)/($par(tw2)*1e-6)]
                set par(rf2) [format "%.2f" [expr $par(rf_factor2)*sqrt($par(sweep_rate2))]]
                set rfsh2 [list2shape [wurst $par(N) $par(tw2) $par(Delta) $par(rf2) 0.0]]

                # Set third WURST pulse (refocussing)
                set par(sweep_rate3) [expr ($par(Delta)*1e3)/($par(tw3)*1e-6)]
                set par(rf3) [format "%.2f" [expr $par(rf_factor3)*sqrt($par(sweep_rate3))]]
                set rfsh3 [list2shape [wurst $par(N) $par(tw3) $par(Delta) $par(rf3) 0.0]]

                # Set filenames for WURST type experiments
                set par(filename) $par(name)_$par(type)_rffactor_$par(rf_factor1)_$par(rf_factor2)_$par(rf_factor3)_tw_$par(tw1)_$par(tw2)_$par(tw3)_delays_$par(tau1)_$par(tau2)_$par(tau3)_delta_$par(Delta)_N_$par(N)

                set rfsh_shape1 [wurst_phasecorr $par(N) $par(tw1) $par(Delta) 100 $par(filename_phasecorrect)]
                set rfsh_shape2 [wurst $par(N) $par(tw2) $par(Delta) 100]
                set rfsh_shape3 [wurst $par(N) $par(tw3) $par(Delta) 100]

                printwave $rfsh_shape1 1
                printwave $rfsh_shape2 2
                printwave $rfsh_shape3 3

                set rfsh11 [list2shape [wurst_phasecorr $par(N) $par(tw1) $par(Delta) 1 $par(filename_phasecorrect)]]
                set rfsh22 [list2shape [wurst $par(N) $par(tw2) $par(Delta) 1]]
                set rfsh33 [list2shape [wurst $par(N) $par(tw3) $par(Delta) 1]]

                save_shape $rfsh1 $par(filename).simpson1
                save_shape $rfsh2 $par(filename).simpson2
                save_shape $rfsh3 $par(filename).simpson3
            } elseif {[string equal $par(type) "double_echo_phasecorr"]} {
                # Set first WURST pulse (excitation)
                set par(sweep_rate1) [expr ($par(Delta)*1e3)/($par(tw1)*1e-6)]
                set par(rf1) [format "%.2f" [expr $par(rf_factor1)*sqrt($par(sweep_rate1))]]
                set rfsh1 [list2shape [wurst_phasecorr $par(N) $par(tw1) $par(Delta) $par(rf1) $par(filename_phasecorrect) $par(ph1) 0.05]]

                # Set second WURST pulse (refocussing)
                set par(sweep_rate2) [expr ($par(Delta)*1e3)/($par(tw2)*1e-6)]
                set par(rf2) [format "%.2f" [expr $par(rf_factor2)*sqrt($par(sweep_rate2))]]
                set rfsh2 [list2shape [wurst $par(N) $par(tw2) $par(Delta) $par(rf2) $par(ph2) 0.05]]

                # Set third WURST pulse (refocussing)
                set par(sweep_rate3) [expr ($par(Delta)*1e3)/($par(tw3)*1e-6)]
                set par(rf3) [format "%.2f" [expr $par(rf_factor3)*sqrt($par(sweep_rate3))]]
                set rfsh3 [list2shape [wurst $par(N) $par(tw3) $par(Delta) $par(rf3) $par(ph3) 0.05]]

                # Set filenames for WURST type experiments
                set par(filename) $par(name)_$par(type)_rffactor_$par(rf_factor1)_$par(rf_factor2)_$par(rf_factor3)_tw_$par(tw1)_$par(tw2)_$par(tw3)_delays_$par(tau1)_$par(tau2)_$par(tau3)_delta_$par(Delta)_N_$par(N)
            }

                foreach offset_value        $offset_value_list {
                    set par(offset)         $offset_value

                    # Make simulation
                    set f [fsimpson [list [list shift_1_iso $par(offset)]]]
                    # Save final spectra and move them to the corresponding output directories
                    set re [findex $f 1 -re]
                    set im [findex $f 1 -im]
                    # Calculate magnitude of xy projection (of I1p)
                    set xyproj [expr sqrt(($re)**2+($im)**2)]	

                    lappend results [format "%s %s %s %s" $par(offset) $re $im $xyproj]

                    funload $f
                }
        free_all_shapes
        }

        # Extraction and summation
        set results_sum {}
        set n [llength $offset_value_list]

        for {set i 0} {$i < $n} {incr i} {
            set results_sum_temp {}
            set results_sum_temp [lmap [lreplace [lrepeat $n b] $i $i a] $results {set a}]

            set re 0.0
            set im 0.0
            set xyproj 0.0

            foreach elem $results_sum_temp {
                set offs     [lindex $elem 0]
                set re       [expr $re+[lindex $elem 1]]
                set im       [expr $im+[lindex $elem 2]]
                set xyproj   [expr $xyproj+[lindex $elem 3]]
            }
            lappend results_sum [format "%s %s %s %s" $offs [expr $re/8.0] [expr $im/8.0] [expr $xyproj/8.0]]
        }

        # Write output
                set fileID [open $par(filename).out "w"]
                foreach l $results_sum {
                    puts $fileID $l
                }
                close $fileID
        }



        ###########################################################################
        # Proc for WURST shape calculation
        # Changed 20.01.2020 by Max Bußkamp:
        #   - Added Option for Phasecycle
        #   - Added rfmax to input variables
        #   - Added default values for stepsize, direction and offset
        ###########################################################################
        proc wurst {N tw Delta rfmax {phaseoffset 0.0} {stepsize 0.05} {direction 0} {offset 0.0}} {
            global par

            set pi [expr 4.0*atan(1.0)]
            set nsteps [expr round($tw/$stepsize)]

            for {set i 1} {$i <= $nsteps} {incr i} {
                set amp [expr $rfmax*(1.0-abs(pow(cos(($pi*$stepsize*$i)/($tw)),$N)))]
                set ph [expr ((180.0/$pi)*2.0*$pi*(($offset*1e3+($Delta*1e3/2.0))*$stepsize*1e-6*$i-($Delta*1e3/(2.0*$tw*1e-6))*pow($stepsize*1e-6*$i,2)))+$phaseoffset]
                if {$direction} {
                    set ph [expr fmod($ph,360)]
                } else {
                    set ph [expr fmod(-$ph,360)+360.0]
                }
                lappend wavelist [format "%6.2f %6.2f" $amp $ph]
            }
            return $wavelist
        }

        ###########################################################################
        # Proc for WURST shape calculation
        # Changed 09.07.2019 by Max Bußkamp:
        #   - Added rfmax to input variables
        #   - Added default values for stepsize, direction and offset
        ###########################################################################
        proc wurst_phasecorr {N tw Delta rfmax filename_phasecorrect {phaseoffset 0.0} {stepsize 0.05} {direction 0} {offset 0.0}} {
            global par

            set phasecorr_file  [open $filename_phasecorrect]
            set phasecorr       [read $phasecorr_file]
            set phasecorr_list  [split $phasecorr "\n"]
            set pi [expr 4.0*atan(1.0)]
            set nsteps [expr round($tw/$stepsize)]

            for {set i 1} {$i <= $nsteps} {incr i} {
                set j [expr $i-1]
                set amp [expr $rfmax*(1.0-abs(pow(cos(($pi*$stepsize*$i)/($tw)),$N)))]
                set ph [expr ((180.0/$pi)*2.0*$pi*(($offset*1e3+($Delta*1e3/2.0))*$stepsize*1e-6*$i-($Delta*1e3/(2.0*$tw*1e-6))*pow($stepsize*1e-6*$i,2)))+$phaseoffset+[lindex $phasecorr_list $j 0]]
                if {$direction} {
                    set ph [expr fmod($ph,360)]
                } else {
                    set ph [expr fmod(-$ph,360)+360.0]
                }
                lappend wavelist [format "%6.2f %6.2f" $amp $ph]
            }
            return $wavelist
        }


        proc list_offset {} {
                global par

                for {set i $par(start_offset)} {$i<=$par(end_offset)} {set i [expr $i+$par(ss_offset)]} {
                        set offs [expr -1*$i]
                        lappend list_offs $offs
                }
                return $list_offs
        }


        proc list_gen { list_start list_end list_step} {

                for {set i $list_start} {$i<=$list_end} {set i [expr $i+$list_step]} {
                        set list_entry [expr $i]
                        set list_entry [format "%.2f" $list_entry]
                        lappend list $list_entry
                }
                return $list
        }


        ###########################################################################
        # Proc for generating an output file from shapes
        # 09.07.2019 by Max Bußkamp
        ###########################################################################
        proc printwave {wave counter} {
            global par
            set filename $par(filename).shape$counter
            if {[file exists $filename]} {
            puts "Warning: $filename exists and will be overwritten!"
            }
            set fp [open $filename w]
            set np [llength $wave]
            
            puts $fp "##TITLE= WURST-${par(N)} shape (duration $par(tw1) us, sweep width $par(Delta) kHz, step size: 0.05 us, sweep rate: $par(sweep_rate1) MHz/ms)"
            puts $fp "##USAGE= WURST pulse for inversion and excitation"
            puts $fp "##JCAMP-DX= 5.00 \$\$ Bruker JCAMP library"
            puts $fp "##DATA TYPE= Shape Data"
            puts $fp "##ORIGIN= Generated from wurst program"
            puts $fp "##DATE= "
            puts $fp "##TIME= "
            puts $fp "##\$SHAPE_PARAMETERS= Type: Wurst ; Total Sweep-Width \[Hz\] [expr $par(Delta)*1000.0] ; Length of Pulse \[usec\] [expr 1.0*$par(tw1)] ; Amplitude Power Index ${par(N)}.0 ; 1=High to low field, -1=Low to high field 1"
            puts $fp "##MINX= 0.000000e+00"
            puts $fp "##MAXX= 1.000000e+02"
            puts $fp "##MINY= 0.000000e+00"
            puts $fp "##MAXY= 3.600000e+02"
            puts $fp "##\$SHAPE_EXMODE= Adiabatic"
            puts $fp "##\$SHAPE_TOTROT= 1.800000e+02"
            puts $fp "##\$SHAPE_TYPE= Inversion"
            puts $fp "##\$SHAPE_BWFAC= 0.000000e+00"
            puts $fp "##\$SHAPE_INTEGFAC= 0.000000e+00"
            puts $fp "##\$SHAPE_MODE= 1"
            puts $fp "##NPOINTS= $np"
            puts $fp "##XYPOINTS= (XY..XY)"

            foreach l $wave {
            puts $fp [format "%.6e, %.6e" [lindex $l 0] [lindex $l 1]]
            }
            puts $fp "##END= "
            close $fp
        }"""
        simpson_inputfile = open('phasecorrection_liquid.tcl', 'w')
        simpson_inputfile.write(simpson_input)
        simpson_inputfile.close()

        ###############################################################################
        # Calculate Phasecorrection for given pulselength from simulation
        ###############################################################################
        run(['simpson',
                'phasecorrection_liquid.tcl',
                tw1,
                tw2,
                tw3,
                'double_echo',
                delta,
                N,
                rffactor1,
                rffactor2,
                rffactor3,
                tau1,
                tau2,
                tau3,
                'none',
                ss_offset])

        filename_phasecorr = ('phasecorrection_liquid_' +
                            'rffactor_' + rffactor1 + '_' + rffactor2 + '_' + rffactor3 +
                            '_tw_' + tw1 + '_' + tw2 + '_' + tw3 +
                            '_delays_' + tau1 + '_' + tau2 + '_' + tau3 +
                            '_delta_' + delta +
                            '_N_' + N +
                            '.out')

        fig = plt.figure(figsize=(6.5, 6))
        ax1 = plt.subplot2grid((2, 1), (0, 0))
        ax2 = plt.subplot2grid((2, 1), (1, 0))
        fig.tight_layout()

        dat_phasecorr = np.genfromtxt(filename_phasecorr, delimiter=' ')

        phase = np.zeros((len(dat_phasecorr), 2))
        for i in range(len(dat_phasecorr)):
            phase[i, 0] = dat_phasecorr[i, 0]
            phase[i, 1] = np.angle(complex(dat_phasecorr[i, 1], dat_phasecorr[i, 2]))
        phase[:,1] = np.rad2deg(np.unwrap(phase[:,1]))

        ###############################################################################
        # Interpolation
        ###############################################################################
        weight = []
        for i in range(len(phase[:, 0])):
            if(i < len(phase[:, 0])*start):
                weight.append(outer_weight)
            elif(i > len(phase[:, 0])*end):
                weight.append(outer_weight)
            else:
                weight.append(1.0)

        coefs = poly.polyfit(phase[:, 0], phase[:, 1], poly_order, w=weight)
        ffit = poly.Polynomial(coefs)

        np_tw = round(float(tw1)/0.05)
        pulselength = np.linspace(phase[0, 0], phase[-1, 0], np_tw)

        phase_interpol = ffit(pulselength)

        phase_interpol2 = []
        phase_interpol2.append(pulselength)
        phase_interpol2.append(phase_interpol)

        weight = []
        for i in range(len(phase_interpol2[0])):
            if(i < len(phase_interpol2[0])*start):
                weight.append(outer_weight)
            elif(i > len(phase_interpol2[0])*end):
                weight.append(outer_weight)
            else:
                weight.append(1.0)

        phase_interpol2[1]=phase_interpol2[1]*weight

        interpol_org = interpolate.interp1d(phase[:, 0], phase[:, 1])
        interpol_org = interpol_org(phase_interpol2[0])

        rms_start = 0.0
        for i in range(len(phase_interpol2[0])):
            if(i < len(phase_interpol2[0])*start):
                rms_start = rms_start + 0.0
            elif(i > len(phase_interpol2[0])*end):
                rms_start = rms_start + 0.0
            else:
                rms_start = rms_start + abs(phase_interpol2[1][i] - interpol_org[i])
        rms = rms_start

        while abs(rms_start-rms) < rms_limit:
            rms_start = rms
            start = start - rmssteps
            end = end + rmssteps
            weight = []
            for i in range(len(phase[:, 0])):
                if(i < len(phase[:, 0])*start):
                    weight.append(outer_weight)
                elif(i > len(phase[:, 0])*end):
                    weight.append(outer_weight)
                else:
                    weight.append(1.0)

            coefs = poly.polyfit(phase[:, 0], phase[:, 1], poly_order, w=weight)
            ffit = poly.Polynomial(coefs)

            pulselength = np.linspace(phase[0, 0], phase[-1, 0], np_tw)

            phase_interpol = ffit(pulselength)

            phase_interpol2 = []
            phase_interpol2.append(pulselength)
            phase_interpol2.append(phase_interpol)

            weight = []
            for i in range(len(phase_interpol2[0])):
                if(i < len(phase_interpol2[0])*start):
                    weight.append(outer_weight)
                elif(i > len(phase_interpol2[0])*end):
                    weight.append(outer_weight)
                else:
                    weight.append(1.0)

            phase_interpol2[1]=phase_interpol2[1]*weight

            rms = 0.0
            for i in range(len(phase_interpol2[0])):
                if(i < len(phase_interpol2[0])*start):
                    rms = rms + 0.0
                elif(i > len(phase_interpol2[0])*end):
                    rms = rms + 0.0
                else:
                    rms = rms + abs(phase_interpol2[1][i] - interpol_org[i])
            if (start < 0.0-rmssteps):
                break

        start = start + rmssteps
        end = end - rmssteps
        weight = []
        for i in range(len(phase[:, 0])):
            if(i < len(phase[:, 0])*start):
                weight.append(outer_weight)
            elif(i > len(phase[:, 0])*end):
                weight.append(outer_weight)
            else:
                weight.append(1.0)

        coefs = poly.polyfit(phase[:, 0], phase[:, 1], poly_order, w=weight)
        ffit = poly.Polynomial(coefs)

        pulselength = np.linspace(phase[0, 0], phase[-1, 0], np_tw)

        phase_interpol = ffit(pulselength)

        phase_interpol2 = []
        phase_interpol2.append(pulselength)
        phase_interpol2.append(phase_interpol)

        weight = []
        for i in range(len(phase_interpol2[0])):
            if(i < len(phase_interpol2[0])*start):
                weight.append(outer_weight)
            elif(i > len(phase_interpol2[0])*end):
                weight.append(outer_weight)
            else:
                weight.append(1.0)

        phase_interpol2[1]=phase_interpol2[1]*weight

        rms = 0.0
        for i in range(len(phase_interpol2[0])):
            if(i < len(phase_interpol2[0])*start):
                rms = rms + 0.0
            elif(i > len(phase_interpol2[0])*end):
                rms = rms + 0.0
            else:
                rms = rms + abs(phase_interpol2[1][i] - interpol_org[i])

        ###############################################################################
        # Plotting
        ###############################################################################
        np.savetxt(filename_phasecorr.replace('.out', '.phasecorr'), phase_interpol2[1], delimiter=' ')

        ax1.plot(dat_phasecorr[:, 0]/1000, dat_phasecorr[:, 1], label=r'Real')
        ax1.plot(dat_phasecorr[:, 0]/1000, dat_phasecorr[:, 2], label=r'Imag')
        ax1.plot(dat_phasecorr[:, 0]/1000, np.sqrt(dat_phasecorr[:, 1] ** 2 + dat_phasecorr[:, 2] ** 2), label=r'Magnitude')
        ax1.legend(fontsize=6)
        ax1.invert_xaxis()
        ax1.set_ylabel('Magnetization / a.u.')
        ax2.plot(phase[:, 0]/1000, phase[:, 1], ls='-', c='k', label='Phase')
        ax2.plot(phase_interpol2[0][:]/1000, phase_interpol2[1][:], ".", ms=0.5, c='r', label='Interpolation')
        ax2.legend(fontsize=6)
        ax2.invert_xaxis()
        ax2.set_xlabel('Frequency Offset / kHz')
        ax2.set_ylabel('Phase / degree')
        plt.tight_layout()
        plt.savefig(filename_phasecorr.replace('.out', '_phase.png'))

        ##############################################################################
        # Create corrected Shape Files
        ##############################################################################
        run(['simpson',
            'phasecorrection_liquid.tcl',
            tw1,
            tw2,
            tw3,
            'create_shapes',
            delta,
            N,
            rffactor1,
            rffactor2,
            rffactor3,
            tau1,
            tau2,
            tau3,
            filename_phasecorr.replace('.out', '.phasecorr'),
            ss_offset])

        run(['rm', '-f', 'phasecorrected.spinsys'])
        run(['rm', '-f', 'offset.spinsys'])
        run(['rm', '-f', 'phasecorrection_liquid.tcl'])
        run(['rm', '-f', filename_phasecorr])
        run(['rm', '-f', filename_phasecorr.replace('phasecorrection_liquid', 'phasecorrection_liquid_create_shapes')])

        sg.popup('Simulation finished! Close to show Plot!')

        # print('Correction and creation of all shapes finished!')
        # plt.close()
        plt.show()


window.close()